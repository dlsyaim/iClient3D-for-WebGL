<!-- 项目名称Cesium，默认targetcombine -->
<project name="Cesium" default="combine">
    <!-- target名称build -->
	<target name="build" description="A developer build that prepares the source tree for use as standard AMD modules.">
        <!-- 新建文件夹任务${buildDirectory}" = ./build -->
		<mkdir dir="${buildDirectory}" />
        <!--自定义任务，把glsl转换为js -->
		<glslToJavascript minify="${build.minification}" minifystatefile="${buildDirectory}/minifyShaders.state">
            <!--glsl文件目录，${shadersDirectory}目录下的所有glsl文件 -->
			<glslfiles dir="${shadersDirectory}" includes="**/*.glsl" />
            <!--${shadersDirectory}目录下存在的js文件，不包括.profile.js -->
			<existingjsfiles dir="${shadersDirectory}" includes="**/*.js" excludes="*.profile.js" />
		</glslToJavascript>
        <!--自定义任务，创建CesiumJs，输出到${sourceDirectory}/Cesium.js -->
		<createCesiumJs output="${sourceDirectory}/Cesium.js">
            <!--源文件是以cesiumJsFiles为id的定义的fileset -->
			<sourcefiles refid="cesiumJsFiles" />
		</createCesiumJs>
        <!--自定义任务，创建SpecList，输出到${specsDirectory}/SpecList.js -->
		<createSpecList output="${specsDirectory}/SpecList.js">
            <!--${specsDirectory}目录下所有js文件-->
			<specs dir="${specsDirectory}" includes="**/*.js" excludes="*.js" />
		</createSpecList>
        <!--条件判断，如果${build.debugUnminified}的值为true，那么给exclude.development.gallery属性赋值为**/development/*.html-->
		<condition property="exclude.development.gallery" value="**/development/*.html">
			<istrue value="${build.debugUnminified}" />
		</condition>
        <!--自定义任务，创建GalleryList，输出到${galleryDirectory}/gallery-index.js -->
		<createGalleryList output="${galleryDirectory}/gallery-index.js">
            <!--根据上面的condition的条件，过滤掉值为${exclude.development.gallery}的文件 -->
			<demos dir="${galleryDirectory}" includes="**/*.html" excludes="${exclude.development.gallery}" />
		</createGalleryList>
        <!--自定义任务，创建SandcastleJsHintOptions，输出到${sandcastleDirectory}/jsHintOptions.js -->
		<createSandcastleJsHintOptions output="${sandcastleDirectory}/jsHintOptions.js" jshintoptionspath="${jsHintOptionsPath}" />
	</target>
    <!-- target名称combine，依赖于build、combineJavaScript，先顺序执行这两个target在执行combine target -->
	<target name="combine" depends="build,combineJavaScript" description="Combines all source files into a single stand-alone script." />
    <!--target名称minify -->
	<target name="minify" description="Combines all source files into a single stand-alone, minified script.">
        <!--调用combine target，并将参数build.minification和值true传进去 -->
		<antcall target="combine">
			<param name="build.minification" value="true" />
		</antcall>
        <!--调用minifyCSS target -->
		<antcall target="minifyCSS" />
	</target>
    <!--target名称combineRelease -->
	<target name="combineRelease" description="Combines all source files into a single stand-alone script with debugging code removed.">
        <!--调用combine target，并将参数pragmas.debug和值false传进去 -->
		<antcall target="combine">
			<param name="pragmas.debug" value="false" />
		</antcall>
	</target>
    <!--target名称minifyRelease -->
	<target name="minifyRelease" description="Combines all source files into a single stand-alone, minified script with debugging code removed.">
        <!--调用minify target，并将参数传进去 -->
		<antcall target="minify">
			<param name="pragmas.debug" value="false" />
		</antcall>
	</target>
    <!--target名称release -->
	<target name="release" description="A full release build that creates a shippable product, including building apps and generating documentation.">
        <!--调用minifyRelease target -->
		<antcall target="minifyRelease" />
        <!--调用combine target，并传参 -->
		<antcall target="combine">
			<param name="build.debugUnminified" value="true" />
		</antcall>
        <!--调用generateDocumentation target -->
		<antcall target="generateDocumentation" />
        <!--调用buildApps target -->
		<antcall target="buildApps" />
	</target>
    <!--target名称instrumentForCoverage，依赖于build target -->
	<target name="instrumentForCoverage" depends="build" description="A debug build instrumented for JSCoverage (currently Windows only).">
        <!--执行命令${jscoveragePath}，参数为 ${sourceDirectory} ${instrumentedDirectory} -no-instrument=./ThirdParty-->
		<exec executable="${jscoveragePath}">
			<arg value="${sourceDirectory}" />
			<arg value="${instrumentedDirectory}" />
			<arg value="--no-instrument=./ThirdParty" />
		</exec>
	</target>
    <!--target名称makeZipFile，依赖于release target -->
	<target name="makeZipFile" depends="release" description="Builds zip files containing all release files.">
        <!--执行内置系统任务zip，输出到Cesium-${version}.zip，以${basedir}为基准路径 -->
		<zip destfile="Cesium-${version}.zip" basedir="${basedir}">
            <!--定义了所有要打包的文件目录及文件和排除的文件 -->
			<zipfileset dir="${buildDirectory}" prefix="Build">
				<include name="Apps/**" />
				<exclude name="Apps/TimelineDemo/**" />
				<include name="Cesium/**" />
				<include name="CesiumUnminified/**" />
				<include name="Documentation/**" />
			</zipfileset>
			<include name="Apps/**" />
			<exclude name="Apps/Sandcastle/gallery/development/**" />
			<include name="Source/**" />
			<include name="Specs/**" />
			<include name="ThirdParty/**" />
			<include name="logo.png" />
			<include name="favicon.ico" />
			<include name="server.js" />
			<include name="package.json" />
			<include name="LICENSE.md" />
			<include name="CHANGES.md" />
			<include name="README.md" />
			<include name="web.config" />
			<zipfileset file="index.release.html" fullpath="index.html" />
		</zip>
	</target>
    <!--target名称clean -->
	<target name="clean" description="Removes all generated build artifacts.">
        <!--删除文件任务，包含空目录，遇到错误不停止任务，并定义了要删除的文件集合fileset -->
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="${sourceDirectory}" includes="Cesium.js" />
			<fileset dir="${buildDirectory}" defaultexcludes="false" />
			<fileset dir="${instrumentedDirectory}" defaultexcludes="false" />
			<fileset dir="${shadersDirectory}" includes="**/*.js" excludes="*.profile.js" />
			<fileset dir="${specsDirectory}" includes="SpecList.js" />
			<fileset dir="${sandcastleDirectory}" includes="jsHintOptions.js" />
			<fileset dir="${galleryDirectory}" includes="gallery-index.js" />
			<fileset dir="." includes="Cesium-*.zip" />
		</delete>
	</target>

	<!-- 定义全局属性，引用方式如：${build.minification},即false -->
	<property name="build.minification" value="false" />
	<property name="pragmas.debug" value="true" />
	<property name="runServer.public" value="false" />
	<property name="runServer.port" value="8080" />
	<property name="version" value="1.13" />
	<property name="sourceDirectory" location="Source" />
	<property name="shadersDirectory" location="${sourceDirectory}/Shaders" />
	<property name="examplesDirectory" location="Examples" />
	<property name="sandcastleDirectory" location="Apps/Sandcastle" />
	<property name="galleryDirectory" location="${sandcastleDirectory}/gallery" />
	<property name="specsDirectory" location="Specs" />
	<property name="toolsDirectory" location="Tools" />
	<property name="tasksDirectory" location="${toolsDirectory}/buildTasks" />
	<property name="thirdPartyDirectory" location="ThirdParty" />
	<property name="requirejsPath" location="${thirdPartyDirectory}/requirejs-2.1.9" />
	<property name="rjsPath" location="${requirejsPath}/r.js" />
	<property name="rjsOptions" location="${toolsDirectory}/build.js" />
	<property name="almondPath" location="${thirdPartyDirectory}/almond-0.2.6/almond.js" />
	<property name="jscoveragePath" location="${toolsDirectory}/jscoverage-0.5.1/jscoverage.exe" />
	<property name="rhinoJarPath" location="${toolsDirectory}/rhino-1.7R4/js.jar" />
	<property name="documentationImagesDirectory" location="Documentation/Images" />
	<property name="jsdoc3Directory" location="${toolsDirectory}/jsdoc3" />
	<property name="webProxyDirectory" location="${toolsDirectory}/proxy" />
	<property name="jsHintPath" location="${thirdPartyDirectory}/jshint-2.1.10/jshint.js" />
	<property name="clocPath" location="${toolsDirectory}/cloc-1.60/cloc-1.60.pl" />
	<property name="clocDefinitionsPath" location="${toolsDirectory}/cloc-1.60/cloc_definitions" />
	<property name="jsHintOptionsPath" location=".jshintrc" />
	<property name="nodePath" value="node" />
	<property name="npmPath" value="npm" />

	<!-- Outputs -->
	<property name="buildDirectory" location="Build" />
	<property name="buildOutputDirectory" location="${buildDirectory}/Cesium" />
	<property name="unminifiedOutputDirectory" location="${buildDirectory}/CesiumUnminified" />
	<property name="buildDocumentationDirectory" location="${buildDirectory}/Documentation" />
	<property name="buildDocumentationImagesDirectory" location="${buildDocumentationDirectory}/images" />
	<property name="instrumentedDirectory" location="Instrumented" />
	<property name="buildStubsDirectory" location="${buildDirectory}/Stubs" />

    <!-- 声明一组路径，并以相应的系统分隔符来分割，并命名id为javascriptClassPath，在后面用refid引用该路径-->
	<path id="javascriptClassPath">
		<pathelement path="${rhinoJarPath}" />
		<pathelement path="${toolsDirectory}/bsf-2.4.0/bsf.jar" />
		<pathelement path="${toolsDirectory}/commons-logging-1.1.1/commons-logging-1.1.1.jar" />
	</path>
    <!-- 定义一组文件-->
	<union id="cesiumJsFiles">
		<fileset dir="${sourceDirectory}">
			<include name="**/*.js" />
			<exclude name="*.js" />
			<exclude name="Workers/**" />
			<exclude name="ThirdParty/Workers/**" />
			<exclude name="**/*.profile.js" />
		</fileset>
		<fileset dir="${sourceDirectory}">
			<include name="Workers/createTaskProcessorWorker.js" />
		</fileset>
	</union>
    <!-- 定义一组文件-->
	<fileset dir="${sourceDirectory}" id="cesiumWorkersJsFileSet">
		<include name="**/*.js" />
		<exclude name="*.js" />
		<exclude name="**/*.profile.js" />
	</fileset>
    <!-- 声明自定义任务glslToJavascript，语言为javascript，处理该任务的源文件是${tasksDirectory}/glslToJavaScript.js，使用manager作为引擎，引用之前定义的类路径javascriptClassPath作为classpath -->
    <!-- 该任务的使用见target build-->
	<scriptdef name="glslToJavascript" language="javascript" src="${tasksDirectory}/glslToJavaScript.js" manager="bsf" classpathref="javascriptClassPath" loaderref="javascript.loader">
		<attribute name="minify" />
		<attribute name="minifystatefile" />
		<element name="glslfiles" type="fileset" />
		<element name="existingjsfiles" type="fileset" />
	</scriptdef>

	<scriptdef name="createCesiumJs" language="javascript" src="${tasksDirectory}/createCesiumJs.js" manager="bsf" classpathref="javascriptClassPath" loaderref="javascript.loader">
		<attribute name="output" />
		<element name="sourcefiles" type="resources" />
	</scriptdef>

	<scriptdef name="createSpecList" language="javascript" src="${tasksDirectory}/createSpecList.js" manager="bsf" classpathref="javascriptClassPath" loaderref="javascript.loader">
		<attribute name="output" />
		<element name="specs" type="fileset" />
	</scriptdef>

	<scriptdef name="createGalleryList" language="javascript" src="${tasksDirectory}/createGalleryList.js" manager="bsf" classpathref="javascriptClassPath" loaderref="javascript.loader">
		<attribute name="output" />
		<element name="demos" type="fileset" />
	</scriptdef>

	<scriptdef name="createSandcastleJsHintOptions" language="javascript" src="${tasksDirectory}/createSandcastleJsHintOptions.js" manager="bsf" classpathref="javascriptClassPath" loaderref="javascript.loader">
		<attribute name="output" />
		<attribute name="jshintoptionspath" />
	</scriptdef>

	<scriptdef name="runJsHint" language="javascript" src="${tasksDirectory}/runJsHint.js" manager="bsf" classpathref="javascriptClassPath" loaderref="javascript.loader">
		<attribute name="jshintpath" />
		<attribute name="jshintoptionspath" />
		<attribute name="sandcastlejshintoptionspath" />
		<attribute name="failureproperty" />
		<element name="sourcefiles" type="fileset" />
	</scriptdef>

	<scriptdef name="generateStubs" language="javascript" src="${tasksDirectory}/generateStubs.js" manager="bsf" classpathref="javascriptClassPath" loaderref="javascript.loader">
		<attribute name="stuboutput" />
		<attribute name="pathsoutput" />
		<element name="sourcefiles" type="resources" />
	</scriptdef>

	<scriptdef name="sortRequires" language="javascript" src="${tasksDirectory}/sortRequires.js" manager="bsf" classpathref="javascriptClassPath" loaderref="javascript.loader">
		<element name="sourcefiles" type="fileset" />
	</scriptdef>
    <!-- target名称jsHint（js语法检查），依赖于buildtarget-->
	<target name="jsHint" depends="build" description="Runs JSHint on the entire source tree.">
        <!-- 运行自定义任务runJsHint，由前面的scriptdef声明的，并给参数传值（指定jsHint路径、options路径、sandcastlejshintoptions路径）、源文件等-->
		<runJsHint jshintpath="${jsHintPath}" jshintoptionspath="${jsHintOptionsPath}" sandcastlejshintoptionspath="${sandcastleDirectory}/jsHintOptions.js" failureproperty="jsHint.failure">
			<sourcefiles dir="${basedir}">
				<include name="Source/**/*.js" />
				<exclude name="Source/Shaders/**" />
				<exclude name="Source/ThirdParty/**" />
				<exclude name="Source/Workers/cesiumWorkerBootstrapper.js" />

				<include name="Apps/**/*.js" />
				<include name="Apps/Sandcastle/gallery/*.html" />

				<exclude name="Apps/Sandcastle/ThirdParty/**" />

				<include name="Specs/**/*.js" />

				<include name="Tools/buildTasks/**/*.js" />
			</sourcefiles>
		</runJsHint>
		<fail if="jsHint.failure" message="JSHint failed!" />
	</target>

    <!-- target名称sortRequires-->
	<target name="sortRequires" description="Sorts the list of requires in all source files">
        <!-- 执行自定义任务sortRequires，并给元素sourecesfiles传值（指定源文件）-->
		<sortRequires>
			<sourcefiles dir="${basedir}">
				<include name="Source/**/*.js" />
				<exclude name="Source/Shaders/**" />
				<exclude name="Source/ThirdParty/**" />
				<exclude name="Source/Workers/cesiumWorkerBootstrapper.js" />
				<exclude name="Source/copyrightHeader.js" />
				<exclude name="Source/Workers/transferTypedArrayTest.js" />

				<include name="Apps/**/*.js" />
				<exclude name="Apps/Sandcastle/ThirdParty/**" />

				<include name="Specs/**/*.js" />
				<exclude name="Specs/SpecRunner.js" />
				<exclude name="Specs/SpecList.js" />

				<exclude name="Apps/Sandcastle/Sandcastle-client.js" />
				<exclude name="Apps/Sandcastle/Sandcastle-header.js" />
				<exclude name="Apps/Sandcastle/Sandcastle-warn.js" />
				<exclude name="Apps/Sandcastle/gallery/gallery-index.js" />
				<exclude name="Apps/Sandcastle/jsHintOptions.js" />

				<exclude name="**/*.profile.js" />
			</sourcefiles>
		</sortRequires>
	</target>

	<target name="cloc" depends="build" description="Runs cloc to count lines of code for Source and Specs directories.">
		<echo message="Source:" />
		<apply executable="perl" parallel="true">
			<arg value="${clocPath}" />
			<arg value="--quiet" />
			<arg value="--progress-rate=0" />
			<arg value="--read-lang-def=${clocDefinitionsPath}" />
			<arg value="Source/Core/" />
			<arg value="Source/DataSources/" />
			<arg value="Source/Renderer/" />
			<arg value="Source/Scene/" />
			<arg value="Source/Widgets/" />
			<arg value="Source/Workers/" />
			<fileset id="clocFileSet" dir="Source/">
				<include name="Shaders/*.glsl" />
				<include name="Shaders/**/*.glsl" />
				<include name="main.js" />
			</fileset>
		</apply>
		<echo message="${line.separator}Specs:" />
		<exec executable="perl">
			<arg value="${clocPath}" />
			<arg value="--quiet" />
			<arg value="--progress-rate=0" />
			<arg value="--read-lang-def=${clocDefinitionsPath}" />
			<arg value="Specs/" />
		</exec>
	</target>
    <!-- target名称checkForNode，nodejs环境检查-->
	<target name="checkForNode">
        <!-- 执行node任务 node -version -->
		<exec executable="${nodePath}" failonerror="false" failifexecutionfails="false" resultproperty="node.exec.result">
			<arg value="--version" />
		</exec>
		<fail message="Node.js is required to run this part of the build.  Install from http://nodejs.org/">
			<condition>
				<not>
					<equals arg1="${node.exec.result}" arg2="0" />
				</not>
			</condition>
		</fail>
	</target>

    <!-- 任务名称combineJavaScript.create，合并所有js源文件 -->
	<target name="combineJavaScript.create">
		<!-- 设置相对路径属性，因为r.js不能处理windows的绝对路径 -->
		<property name="relativeAlmondPath" location="${almondPath}" relative="true" basedir="${sourceDirectory}" />
		<property name="combineOutputDirectory" location="${buildDirectory}/combineOutput" />

        <!-- 创建合并的js存放目录 -->
		<mkdir dir="${combineOutputDirectory}" />
		<property name="relativeCombineOutputDirectory" location="${combineOutputDirectory}" relative="true" basedir="${sourceDirectory}" />

        <!-- 调用combineJavaScript.combineCesium target，创建合并的js源文件	-->
		<antcall target="combineJavaScript.combineCesium" />

        <!--调用自定义任务generateStubs，生成stubs，指定生成路径，和所需源文件等参数 	-->
		<mkdir dir="${buildStubsDirectory}" />
		<generateStubs stuboutput="${buildStubsDirectory}/Cesium.js" pathsoutput="${buildStubsDirectory}/paths.js">
			<sourcefiles refid="cesiumJsFiles" />
		</generateStubs>

        <!-- 调用combineJavaScript.combineCesiumWorkers target，合并所有web workers，因为web worker 源文件需要单独处理，不能和其他js文件合并在一起 -->
		<antcall target="combineJavaScript.combineCesiumWorkers" />

		<!-- 将合并的文件复制到相应目录下，并在文件头添加copyrightHeader.js文件的内容 -->
		<copy todir="${outputDirectory}">
			<fileset dir="${combineOutputDirectory}" />
			<filterchain>
				<concatfilter prepend="${sourceDirectory}/copyrightHeader.js" />
			</filterchain>
		</copy>
        <!-- 删除中间文件夹${combineOutputDirectory} -->
		<delete dir="${combineOutputDirectory}" />

		<!-- 复制其他资源（css、texture等）到${outputDirectory}，不包括空文件夹和glsl。json等文件 -->
		<copy todir="${outputDirectory}" includeEmptyDirs="false">
			<fileset dir="${sourceDirectory}">
				<exclude name="**/*.js" />
				<exclude name="**/*.glsl" />
				<exclude name="**/.gitignore" />
				<exclude name="**/package.json" />
			</fileset>
		</copy>
	</target>

    <!-- 合并js源文件target -->
	<target name="combineJavaScript.combineCesium" depends="combineJavaScript.combineCesium.check" unless="no.combineCesium.create">
        <!-- 执行node r.js -o optiongs.......(模块包裹wrap=true，css优化方式：标准压缩，js文件优化方式：不压缩代码，skipModuleInsertion避免不是用define来定义模块但是又用r.js来压缩代码产生的bug，压缩main.js的模块及其依赖项，输出到out指定目录) -->
		<exec executable="${nodePath}" dir="${sourceDirectory}">
			<arg value="${rjsPath}" />
			<arg value="-o" />
			<arg value="${rjsOptions}" />
			<arg value="pragmas.debug=${pragmas.debug}" />
			<arg value="optimize=${optimize}" />
			<arg value="baseUrl=." />
			<arg value="skipModuleInsertion=true" />
			<arg value="name=${relativeAlmondPath}" />
			<arg value="include=main" />
			<arg value="out=${relativeCombineOutputDirectory}/Cesium.js" />
		</exec>
	</target>

    <!-- 合并webwork源文件target -->
	<target name="combineJavaScript.combineCesiumWorkers" depends="combineJavaScript.combineCesiumWorkers.check" unless="no.combineCesiumWorkers.create">
		<!-- 创建独立的web worker文件node r.js -o............ -->
		<apply executable="${nodePath}" dir="${sourceDirectory}" relative="true" force="true">
			<arg value="${rjsPath}" />
			<arg value="-o" />
			<arg value="${rjsOptions}" />
			<arg value="pragmas.debug=${pragmas.debug}" />
			<arg value="optimize=${optimize}" />
			<arg value="baseUrl=." />
			<arg value="skipModuleInsertion=true" />
			<arg value="wrap=false" />
			<srcfile prefix="include=" />
			<targetfile prefix="out=" />
			<globmapper from="*" to="${relativeCombineOutputDirectory}/*.js" />
			<mappedresources>
				<fileset dir="${sourceDirectory}">
					<include name="Workers/cesiumWorkerBootstrapper.js" />
					<include name="Workers/transferTypedArrayTest.js" />
					<include name="ThirdParty/Workers/*.js" />
				</fileset>
				<chainedmapper>
					<globmapper from="*.js" to="*" />
				</chainedmapper>
			</mappedresources>
		</apply>

		<!-- 创建合并的worker文件 -->
		<apply executable="${nodePath}" dir="${sourceDirectory}" relative="true" force="true">
			<arg value="${rjsPath}" />
			<arg value="-o" />
			<arg value="${rjsOptions}" />
			<arg value="optimize=${optimize}" />
			<arg value="pragmas.debug=${pragmas.debug}" />
			<arg value="baseUrl=." />

			<srcfile prefix="name=Workers/" />
			<targetfile prefix="out=" />
			<globmapper from="*" to="${relativeCombineOutputDirectory}/Workers/*.js" />
			<mappedresources>
				<fileset dir="${sourceDirectory}/Workers">
					<include name="*.js" />
					<exclude name="*.profile.js" />
					<exclude name="cesiumWorkerBootstrapper.js" />
					<exclude name="transferTypedArrayTest.js" />
					<exclude name="createTaskProcessorWorker.js" />
				</fileset>
				<chainedmapper>
					<flattenmapper />
					<globmapper from="*.js" to="*" />
				</chainedmapper>
			</mappedresources>
		</apply>
	</target>

    <!-- 合并js文件前的检查，如果指定的目标文件${outputDirectory}/Cesium.js与源文件cesiumJsFiles的引用文件集相比有更新的时间错，则设置属性no.combineCesium.create-->
	<target name="combineJavaScript.combineCesium.check">
		<uptodate property="no.combineCesium.create" targetfile="${outputDirectory}/Cesium.js">
			<srcresources refid="cesiumJsFiles" />
		</uptodate>
	</target>

	<target name="combineJavaScript.combineCesiumWorkers.check">
		<uptodate property="no.combineCesiumWorkers.create" targetfile="${outputDirectory}/Cesium.js">
			<srcfiles refid="cesiumWorkersJsFileSet" />
		</uptodate>
	</target>

    <!-- 合并js源文件，并且不压缩代码target-->
	<target name="combineJavaScript.createUnminified">
		<antcall target="combineJavaScript.create">
			<param name="optimize" value="none" />
			<param name="outputDirectory" value="${unminifiedOutputDirectory}" />
		</antcall>
	</target>

    <!-- copy的条件：${build.minification}为true并且设置了build.debugUnminified，就设置属性combineJavascript.noCopy-->
	<target name="combineJavascript.checkCopy">
		<condition property="combineJavascript.noCopy">
			<or>
				<istrue value="${build.minification}" />
				<isset property="build.debugUnminified" />
			</or>
		</condition>
	</target>

    <!-- 复制合并的js文件，依赖于copy检查target-->
	<target name="combineJavaScript.copyUnminified" depends="combineJavascript.checkCopy" unless="${combineJavascript.noCopy}">
		<copy todir="${buildOutputDirectory}">
			<fileset dir="${unminifiedOutputDirectory}" />
		</copy>
	</target>

    <!-- 合并js文件并且压缩代码，条件是${build.minification}为ture-->
	<target name="combineJavaScript.createMinified" if="${build.minification}">
        <!-- 调用combineJavaScript.create，传入参数uglify2（使用uglify2压缩代码），输出目录${buildOutputDirectory}-->
		<antcall target="combineJavaScript.create">
			<param name="optimize" value="uglify2" />
			<param name="outputDirectory" value="${buildOutputDirectory}" />
		</antcall>
	</target>

    <!-- 合并js文件，依赖于node环境检查、创建没有压缩的js代码，复制合并代码等target-->
	<target name="combineJavaScript" depends="checkForNode,combineJavaScript.createUnminified,combineJavaScript.copyUnminified,combineJavaScript.createMinified" />

    <!-- 压缩CSS。依赖于nodejs环境检查-->
	<target name="minifyCSS" depends="checkForNode">
        <!-- copy任务：复制${sourceDirectory}目录下的css到${buildOutputDirectory}目录下，不包括空文件夹，如果存在则覆盖-->
		<copy todir="${buildOutputDirectory}" includeEmptyDirs="false" overwrite="true">
			<fileset dir="${sourceDirectory}">
				<include name="**/*.css" />
			</fileset>
		</copy>
        <!-- 压缩任务：node r.js -o....-->
		<apply executable="${nodePath}" dir="${buildOutputDirectory}" relative="true">
			<arg value="${rjsPath}" />
			<arg value="-o" />
			<arg value="${rjsOptions}" />
			<srcfile prefix="cssIn=" />
			<targetfile prefix="out=" />
			<identitymapper />
			<fileset dir="${buildOutputDirectory}">
				<include name="**/*.css" />
			</fileset>
		</apply>
	</target>

    <!-- 操作系统检查：如果系统是windows，则设置属性os.windows-->
	<condition property="os.windows">
		<os family="windows" />
	</condition>

    <!-- 如果系统不是windows，执行的npmInstall任务-->
	<target name="npmInstall.nonWindows" unless="os.windows">
        <!-- npm install(依赖于package.json)-->
		<exec executable="${npmPath}" dir="${basedir}" failonerror="true">
			<arg value="install" />
		</exec>
	</target>

    <!-- 如果系统是windows，执行的npmInstall-->
	<target name="npmInstall.windows" if="os.windows">
        <!-- /c npm install-->
		<exec executable="cmd" dir="${basedir}" failonerror="true">
			<arg value="/c" />
			<arg value="${npmPath}" />
			<arg value="install" />
		</exec>
	</target>

    <!-- npmInstall 依赖于系统检查-->
	<target name="npmInstall" depends="npmInstall.windows,npmInstall.nonWindows" />

    <!-- 生成文档，依赖于npminstall-->
	<target name="generateDocumentation" depends="checkForNode,npmInstall" description="Generates HTML documentation.">
        <!-- 执行命令：node node_modules/jsdoc/jsdoc.js conf....-->
		<exec executable="${nodePath}" dir="${basedir}" failonerror="true">
			<env key="CESIUM_VERSION" value="${version}" />
			<arg value="node_modules/jsdoc/jsdoc.js" />
			<arg line="--configure Tools/jsdoc/conf.json" />
		</exec>

        <!-- copy任务：把${documentationImagesDirectory}目录复制到${buildDocumentationImagesDirectory}目录-->
		<copy todir="${buildDocumentationImagesDirectory}">
			<fileset dir="${documentationImagesDirectory}" />
		</copy>
	</target>

    <!-- 运行server，依赖于nodejs环境检查，npminstall等target-->
	<target name="runServer" depends="checkForNode,npmInstall" description="Runs a local web server.">
		<echo>The local web server can also be launched directly by running: node server.js</echo>
        <!-- 条件判断：${runServer.public}为true，泽设置属性runServer.arg.public值为public -->
		<condition property="runServer.arg.public" value="--public" else="">
			<istrue value="${runServer.public}" />
		</condition>
        <!-- 执行命令启动server：node server.js ${runServer.arg.public} port ${runServer.port} -->
		<exec executable="${nodePath}" dir="${basedir}" failonerror="true">
			<arg value="server.js" />
			<arg line="${runServer.arg.public}" />
			<arg line="--port ${runServer.port}" />
		</exec>
	</target>

    <!-- 启动server，public为true -->
	<target name="runPublicServer" description="Runs a public web server.">
		<antcall target="runServer">
			<param name="runServer.public" value="true" />
		</antcall>
	</target>

    <!-- 创建APPs，调用buildCesiumViewer target -->
	<target name="buildApps" description="Create built versions of all example applications.">
		<antcall target="buildCesiumViewer" />
	</target>

    <!-- 创建cesiemviewer 依赖于nodejs环境检查 -->
	<target name="buildCesiumViewer" depends="checkForNode">
        <!-- 设置路径属性 -->
		<property name="cesiumViewerDirectory" location="Apps/CesiumViewer" />
		<property name="cesiumViewerOutputDirectory" location="${buildDirectory}/Apps/CesiumViewer" />
		<mkdir dir="${cesiumViewerOutputDirectory}" />
		<property name="relativeCesiumViewerOutputDirectory" location="${cesiumViewerOutputDirectory}" relative="true" basedir="${cesiumViewerDirectory}" />

		<!-- 压缩js代码，生成${relativeCesiumViewerOutputDirectory}/CesiumViewerStartup.js -->
		<exec executable="${nodePath}" dir="${cesiumViewerDirectory}">
			<arg value="${rjsPath}" />
			<arg value="-o" />
			<arg value="${rjsOptions}" />
			<arg value="optimize=uglify2" />
			<arg value="pragmas.debug=false" />
			<arg value="mainConfigFile=../Apps/CesiumViewer/CesiumViewerStartup.js" />
			<arg value="name=CesiumViewerStartup" />
			<arg value="out=${relativeCesiumViewerOutputDirectory}/CesiumViewerStartup.js" />
		</exec>

		<!-- 将copyright头添加到CesiumViewerStartup.js -->
		<copy file="${cesiumViewerOutputDirectory}/CesiumViewerStartup.js" tofile="${cesiumViewerOutputDirectory}/CesiumViewerStartup.js.tmp">
			<filterchain>
				<concatfilter prepend="${sourceDirectory}/copyrightHeader.js" />
			</filterchain>
		</copy>
        <!-- 重命名 -->
		<move file="${cesiumViewerOutputDirectory}/CesiumViewerStartup.js.tmp" tofile="${cesiumViewerOutputDirectory}/CesiumViewerStartup.js" />

        <!-- 压缩CSS -->
		<exec executable="${nodePath}" dir="${cesiumViewerDirectory}">
			<arg value="${rjsPath}" />
			<arg value="-o" />
			<arg value="${rjsOptions}" />
			<arg value="cssIn=CesiumViewer.css" />
			<arg value="out=${relativeCesiumViewerOutputDirectory}/CesiumViewer.css" />
		</exec>

		<!-- 复制${cesiumViewerDirectory}目录下的其他资源，图片、html等 到${cesiumViewerOutputDirectory}目录下-->
		<copy todir="${cesiumViewerOutputDirectory}">
			<fileset dir="${cesiumViewerDirectory}">
				<exclude name="*.js" />
				<exclude name="*.css" />
			</fileset>
		</copy>

		<!-- 复制requirejs -->
		<copy file="${requirejsPath}/require.min.js" tofile="${cesiumViewerOutputDirectory}/require.js" />

		<!-- 复制assets、webworker文件、css等到 ${cesiumViewerOutputDirectory}-->
		<copy todir="${cesiumViewerOutputDirectory}" includeemptydirs="false">
			<fileset dir="${buildOutputDirectory}">
				<include name="Assets/**" />
				<include name="Workers/**" />
				<include name="ThirdParty/Workers/**" />
				<include name="Widgets/**" />
				<exclude name="Widgets/**/*.css" />
			</fileset>
			<fileset dir="${buildOutputDirectory}">
				<include name="Widgets/InfoBox/InfoBoxDescription.css" />
			</fileset>
		</copy>

		<!-- 复制webconfig -->
		<copy file="${basedir}/web.config" tofile="${cesiumViewerOutputDirectory}/web.config" />

		<!-- 字符替换：把${cesiumViewerOutputDirectory}下的CesiumViewerStartup.js所有../../Source和../../ThirdParty/requirejs-2.1.9替换为. -->
		<replace dir="${cesiumViewerOutputDirectory}" summary="true">
			<replacefilter token="../../Source" value="." />
			<replacefilter token="../../ThirdParty/requirejs-2.1.9" value="." />
			<include name="CesiumViewerStartup.js" />
		</replace>

		<!-- 字符替换（html引用的路径）： ${cesiumViewerOutputDirectory}下的index.html的../../ThirdParty/requirejs-2.1.9替换为.-->
		<replace dir="${cesiumViewerOutputDirectory}" summary="true">
			<replacefilter token="../../ThirdParty/requirejs-2.1.9" value="." />
			<include name="index.html" />
		</replace>

		<!-- 字符替换（css路径）： ${cesiumViewerOutputDirectory}下的所有css文件的../../Source/替换为空-->
		<replace dir="${cesiumViewerOutputDirectory}" summary="true">
			<replacefilter token="../../Source/" value="" />
			<include name="*.css" />
		</replace>
	</target>
</project>
